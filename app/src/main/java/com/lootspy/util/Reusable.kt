package com.lootspy.util

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment.Companion.Center
import androidx.compose.ui.Alignment.Companion.CenterStart
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.unit.dp

/**
 * Display one of three things: a loading indicator; a list of items generated by itemContent; or
 * a supplied composable to represent the lack of any items.
 */
@Composable
fun <T> ScreenContent(
  loading: Boolean,
  items: List<T>,
  modifier: Modifier = Modifier,
  headerContent: @Composable () -> Unit = {},
  itemContent: @Composable (Int, T) -> Unit,
  footerContent: @Composable () -> Unit = {},
  loadingText: String = "",
  emptyComposable: @Composable () -> Unit,
) {
  Column(modifier = modifier, verticalArrangement = Arrangement.spacedBy(4.dp)) {
    headerContent()
    if (loading) {
      Box(modifier = modifier.fillMaxSize(), contentAlignment = Center) {
        Text(text = loadingText)
        CircularProgressIndicator(modifier = modifier)
      }
    } else if (items.isNotEmpty()) {
      items.forEachIndexed { index, item ->
        itemContent(index, item)
      }
    } else {
      Box(modifier = modifier.fillMaxHeight(), contentAlignment = CenterStart) {
        emptyComposable()
      }
    }
    footerContent()
  }
}

@Composable
fun <T> ScreenContentWithEmptyText(
  loading: Boolean,
  items: List<T>,
  modifier: Modifier = Modifier,
  headerContent: @Composable () -> Unit = {},
  itemContent: @Composable (Int, T) -> Unit,
  footerContent: @Composable () -> Unit = {},
  emptyText: String,
  textStyle: TextStyle = MaterialTheme.typography.headlineMedium
) {
  ScreenContent(
    loading = loading,
    items = items,
    headerContent = headerContent,
    itemContent = itemContent,
    footerContent = footerContent,
    modifier = modifier
  ) {
    Text(
      text = emptyText,
      style = textStyle
    )
  }
}

@Composable
fun SupportingErrorText(inputError: Int?) {
  Text(
    text = if (inputError != null) stringResource(id = inputError) else "",
    modifier = Modifier.fillMaxWidth(),
    color = MaterialTheme.colorScheme.error,
  )
}